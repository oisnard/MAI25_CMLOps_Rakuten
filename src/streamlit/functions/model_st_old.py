import numpy as np
import pandas as pd
import streamlit as st 
import matplotlib.pyplot as plt
import altair as alt
from functions.tools_st import convert_to_str, show_zoomable_image
import pickle
import src.tools.tools as tools
from pathlib import Path




@st.cache_data
def get_camconv_struct():
    img_struct = plt.imread(Path(tools.DATA_VIZ_DIR+"/models/camconv.png"))
    return img_struct



def best_model(x_train, df_cat):
    url_hugging = "https://huggingface.co/docs/transformers/index"
    url_camembert = "https://huggingface.co/docs/transformers/model_doc/camembert"
    url_tensor = "https://www.tensorflow.org/"    
    url_keras = "https://keras.io/api/applications/"
    url_conv = "https://www.tensorflow.org/api_docs/python/tf/keras/applications/ConvNeXtLarge"

    st.header("Meilleur Mod√®le")
    st.write("Dans cette section, nous pr√©sentons le meilleur mod√®le obtenu pour le challenge. Ce mod√®le est le r√©sultat du projet Rakuten r√©alis√© par Olivier ISNARD, Julien TREVISAN et Bruno RAMAYE dans le cadre de leur formation Data Scientist.")
    st.markdown(
    'Ce mod√®le a permis d\'atteindre la [premi√®re place du classement](https://challengedata.ens.fr/participants/challenges/35/ranking/public) du challenge üèÜ' 
    )   
    st.write("Le mod√®le retenu est bas√© sur :")
    st.write("- Un mod√®le textuel bas√© sur [CamemBERT](%s) de [Transformers](%s) ;" %(url_camembert, url_hugging))
    st.write("- Un mod√®le 'image' base sur [ConvNeXtLarge](%s) des librairies [keras](%s) de [TensorFlow](%s)." %(url_conv, url_keras, url_tensor))

    st.subheader("Pr√©processing des donn√©es")
    st.write("Le pr√©processing retenu et donnant les meilleures performances de F1-score est le suivant :")
    st.write("- Pour les donn√©es textuelles : remplacement des NaNs par une cha√Æne de caract√®re vide, suppression des balises html avec les librairies de [BeautifulSoup](%s), fusion de la d√©signation et description s√©par√©es par les caract√®res '. ' ;" % "https://pypi.org/project/beautifulsoup4/")
    st.write("- Pour les images : seule la fonction tf.keras.applications.convnext.preprocess_input est appliqu√©e. La taille des images est maintenue √† 500x500 pixels.")
    st.subheader("Tokenisation des donn√©es textuelles")
    st.write("Le tokenizer CamemBERT pr√©-entra√Æn√© sur [camembert-base](%s) est appliqu√© sur les donn√©es textuelles. Diff√©rentes valeurs du nombre maximal de tokens par produit ont √©t√© test√©es (128, 256 et 512)." % "https://huggingface.co/almanach/camembert-base")
    st.write("Les meilleurs r√©sultats ont √©t√© obtenus avec un nombre limite de 128 et 256 tokens par produit (param√®tre *MAX_LEN*).")
    st.subheader("Structure du mod√®le fusionn√©")
    st.write("La partie CamemBERT du mod√®le fusionn√© est bas√© sur la classe [TFCamembertModel](%s) de transformers. En sortie du mod√®le TFCamembertModel, un Reshape de la hidden layer est appliqu√© puis une couche Dense √† 768 unit√©s avec une fonction d'activation tangente hyperbolique." %("https://huggingface.co/docs/transformers/model_doc/camembert#transformers.TFCamembertModel"))
    st.write("En sortie du mod√®le ConvNeXtLarge (dont les poids sont initialis√©s de mani√®re al√©atoire) , une couche GlobalAveragePooling2D et une couche Dense de 768 unit√©s (fonction d'activation Relu) sont appliqu√©es. Les 30 derni√®res couches du mod√®le sont rendues entra√Ænables, except√©es les √©ventuelles couches de BatchNormalization.")
    st.write("La fusion des 2 mod√®les est r√©alis√©e avec une couche Concatenate. Deux couches Dense (de 1536 et 512 unit√©s avec la fonction Relu) sont ensuite appliqu√©es ainsi qu'une derni√®re couche Dense de 27 unit√©s (fonction d'activation softmax) pour la classification.")
    st.write("La structure et le r√©sum√© du mod√®le g√©n√©r√© sont affich√©s dans la figure suivante :")
    show_zoomable_image(Path(tools.DATA_VIZ_DIR+"/models/camconv.png"), caption="Structure du mod√®le fusionn√© CamemBERT + ConvNeXtLarge")
 
    st.write("Le nombre de param√®tres du mod√®le d√©pend de la valeur *MAX_LEN* (le nombre maximal de tokens par produit) :")
    df_summary = pd.read_csv(Path(tools.DATA_VIZ_DIR +"/models/model_summary2.csv"), sep=';')
    df_summary_melt = df_summary.melt(id_vars="MAX LEN", var_name="Type", value_name="Nombre")
    df_summary_melt['MAX LEN'] = df_summary_melt['MAX LEN'].astype(str)
    df_summary_melt['Nombre'] /= 1e6
    titre_chart = "Nombre de param√®tres en fonction du param√®tre MAX_LEN"
    chart_param = alt.Chart(df_summary_melt).mark_bar().encode(
        y='MAX LEN',
        x=alt.X('Nombre:Q', title="Nombre (Millions)"),
        color='Type',
        tooltip=['MAX LEN', 'Type', 'Nombre']
    ).properties(title=alt.TitleParams(titre_chart, align='center')).configure_title(anchor='middle')
    st.altair_chart(chart_param)

    st.subheader("Entra√Ænement du mod√®le")
    st.write("Dans une premi√®re √©tape, le jeu de donn√©es X_train a √©t√© d√©coup√© en 3 parties afin de pouvoir comparer les r√©sultats du mod√®le fusionn√© sur le m√™me jeu de donn√©es pour calculer le F1-Score des mod√®les textuels et images.")
    st.write("Le jeu de donn√©es X_train a √©t√© d√©coup√© en 3 parties avec la fonction *train_test_split* de *scikit-learn* en utilisant le param√®tre *stratify* afin de conserver les m√™mes proportions de labels dans les diff√©rents jeux de donn√©es g√©n√©r√©s :")
    st.write("- Un jeu d'entra√Ænement repr√©sentant 72.25% des donn√©es du jeu X_train ;")
    st.write("- Un jeu de validation pendant l'entra√Ænement repr√©sentant 12.75% du jeu X_train ;")
    st.write("- Un jeu de test repr√©sentant 15% du jeu de X_train.")
    st.write("La fonction de perte permettant d'obtenir les meilleurs r√©sultats est la Spare Categorical Entropy et l'optimiseur est celui d'AdamW avec le param√®tre *Amsgrad* activ√© et un taux d'apprentissage initial de 2e-5.")

    st.subheader("F1-Score sur le jeu de test issu du d√©coupage de X_train")
    st.write("Le F1-score pond√©r√© obtenu apr√®s avoir entra√Æn√© le mod√®le fusionn√© sur 72.25% du jeu X_train est d'environ 91.8%. La d√©clinaison du F1-score par code type est la suivante :")

    filename = tools.DATA_VIZ_DIR + "/models/cr_fusion_cam_conv-1-0bis.pkl"
    with open(filename, "rb") as f:
        cr_dict_ref = pickle.load(f)

    df_fusion = pd.DataFrame.from_dict(cr_dict_ref).T.iloc[:-3,:]
    df_fusion = df_fusion.drop(columns=['precision', 'recall', 'support'], axis=1)
    df_fusion['PrdTypeCode'] = df_fusion.index.astype(int)
    df_fusion = df_fusion.sort_values(by="f1-score", ascending=False)
    df_fusion['F1-Score'] = df_fusion['f1-score']*100.
    df_fusion['F1-Score'] = df_fusion['F1-Score'].apply(convert_to_str)
    df_fusion = pd.merge(left=df_fusion, right=df_cat, left_on="PrdTypeCode", right_on="prdtypecode", how='left')
        
    chart_f1_details_fusion = alt.Chart(df_fusion).mark_bar().encode(
        x=alt.X('PrdTypeCode:N', sort=list(df_fusion['f1-score'].values)),
        y='f1-score',
        tooltip = ['PrdTypeCode', 'Cat√©gorie', 'F1-Score'],
        color=alt.Color('f1-score', scale=alt.Scale(scheme='viridis', reverse=True))  # Apply Viridis color scale
    ).properties(width=600, height=400).interactive()
    chart_f1_global_fusion = alt.Chart(pd.DataFrame({'f1-score' : [cr_dict_ref["weighted avg"]["f1-score"]]})).mark_rule(color='orange', size=2).encode(y='f1-score')
    chart_comb_fusion = chart_f1_details_fusion + chart_f1_global_fusion
    st.altair_chart(chart_comb_fusion, use_container_width=True)        
    st.write("En comparant le F1-Score obtenu pour chaque code type de produit avec le mod√®le fusionn√© et le mod√®le CamemBERT sur le m√™me jeu de test (issu du d√©coupage de X_train), on peut observer les b√©n√©fices de l'ajout du mod√®le image ConvNeXtLarge.")
    df_fusion["Mod√®le"] = "Mod√®le fusionn√©"

    filename = tools.DATA_VIZ_DIR + "/models/cr_testCam5-17_pretrain_adamW.pkl"
    with open(filename, "rb") as f:
        cr_dict_cam = pickle.load(f)

    df_cam = pd.DataFrame.from_dict(cr_dict_cam).T.iloc[:-3,:]
    df_cam = df_cam.drop(columns=['precision', 'recall', 'support'], axis=1)
    df_cam['PrdTypeCode'] = df_cam.index.astype(int)
    df_cam = df_cam.sort_values(by="f1-score", ascending=False)
    df_cam['F1-Score'] = df_cam['f1-score']*100.
    df_cam['F1-Score'] = df_cam['F1-Score'].apply(convert_to_str)
    df_cam = pd.merge(left=df_cam, right=df_cat, left_on="PrdTypeCode", right_on="prdtypecode", how='left')
    df_cam["Mod√®le"] = "Mod√®le CamemBERT"
    df_merge = pd.concat([df_fusion, df_cam], ignore_index=True)
    chart_f1_details_both = alt.Chart(df_merge).mark_bar().encode(
        x=alt.X('PrdTypeCode:N', sort=list(df_fusion['f1-score'].values)),
        y=alt.Y('f1-score', scale=alt.Scale(domain=[0.6, 1.])),
        tooltip = ['PrdTypeCode', 'Cat√©gorie', 'Mod√®le', 'F1-Score'],
        color='Mod√®le',
        xOffset='Mod√®le:N'
    ).properties(width=600, height=400, title="Comparaison des F1-Score du mod√®le fusionn√© et du mod√®le CamemBERT").configure_title(anchor='middle').interactive()
    st.altair_chart(chart_f1_details_both, use_container_width=True)   

    st.subheader("Entra√Ænement du mod√®le pour les pr√©dictions du jeu X_test")
    st.write("En vue de soumettre les pr√©dictions des codes types des produits r√©f√©renc√©s dans le jeu X_test, le mod√®le fusionn√© a √©t√© entra√Æn√© sur 90% du jeu de donn√©es X_train avec 10% des donn√©es conserv√©es pour la validation et activer les callbacks d'ajustements du learning rate pendant l'entra√Ænement.")
    st.write("Voici le F1-Score calcul√© sur le jeu de donn√©es de validation apr√®s l'entra√Ænement du mod√®le fusionn√© sur 10 epochs : ")
    st.write("- Le F1 Score du mod√®le fusionn√© avec le param√®tre *MAX_LEN* fix√© √† 128 est de 92.37% ;")
    st.write("- Le F1 Score du mod√®le fusionn√© avec le param√®tre *MAX_LEN* fix√© √† 256 est de 92.36% ;")
    st.write("- Le F1 Score du mod√®le fusionn√© avec le param√®tre *MAX_LEN* fix√© √† 512 est de 91.30%.")
    st.write("L'augmentation du param√®tre MAX_LEN d√©grade la pr√©diction des produits dont le nombre de tokens est faible (<64) alors que ces produits repr√©sentent presque la moiti√© du jeu de donn√©es.")
    st.write("La figure suivante montre le F1-Score d√©clin√© par code type obtenu par le param√®tre *MAX_LEN* √† 128 : ")
    filename = tools.DATA_VIZ_DIR + "/models/cr_fusion_cam_conv_90train_128.pkl"
    with open(filename, "rb") as f:
        cr_dict_ref90 = pickle.load(f)

    df_fusion90 = pd.DataFrame.from_dict(cr_dict_ref90).T.iloc[:-3,:]
    df_fusion90 = df_fusion90.drop(columns=['precision', 'recall', 'support'], axis=1)
    df_fusion90['PrdTypeCode'] = df_fusion90.index.astype(int)
    df_fusion90 = df_fusion90.sort_values(by="f1-score", ascending=False)
    df_fusion90['F1-Score'] = df_fusion90['f1-score']*100.
    df_fusion90['F1-Score'] = df_fusion90['F1-Score'].apply(convert_to_str)
    df_fusion90 = pd.merge(left=df_fusion90, right=df_cat, left_on="PrdTypeCode", right_on="prdtypecode", how='left')
        
    chart_f1_details_fusion90 = alt.Chart(df_fusion90).mark_bar().encode(
        x=alt.X('PrdTypeCode:N', sort=list(df_fusion90['f1-score'].values)),
        y='f1-score',
        tooltip = ['PrdTypeCode', 'Cat√©gorie', 'F1-Score'],
        color=alt.Color('f1-score', scale=alt.Scale(scheme='viridis', reverse=True))  # Apply Viridis color scale
    ).properties(width=600, height=400).interactive()
    chart_f1_global_fusion90 = alt.Chart(pd.DataFrame({'f1-score' : [cr_dict_ref90["weighted avg"]["f1-score"]]})).mark_rule(color='orange', size=2).encode(y='f1-score')
    chart_comb_fusion90 = chart_f1_details_fusion90 + chart_f1_global_fusion90
    st.altair_chart(chart_comb_fusion90, use_container_width=True)       

    st.write("Un entra√Ænement sur le jeu complet des donn√©es X_train est r√©alis√© sur une seule epoch (afin de limiter le sur-apprentissage du mod√®le). Les pr√©dictions du jeu X_test ont √©t√© soumises au site organisateur du challenge Rakuten. Les r√©sultats obtenus sont les suivants :")
    st.write("- Avec le param√®tre *MAX_LEN* fix√© √† 128, le F1-Score pond√©r√© obtenu est de 91.89% ;")
    st.write("- Avec le param√®tre *MAX_LEN* fix√© √† 256, le F1-Score pond√©r√© est de 91.96%.")
    st.write("Les r√©sultats obtenus nous ont permis d'atteindre la premi√®re place au classement public (en date du 28 F√©vrier 2025) et d'am√©liorer sensiblement le meilleur r√©sultat pr√©c√©dent qui datait de D√©cembre 2020.")
    fig = plt.figure()
    img_ranking = plt.imread(tools.DATA_VIZ_DIR + "/models/classement_rakuten.png")
    plt.imshow(img_ranking)
    plt.axis('off')
    plt.title("Extrait du classement public du challenge Rakuten (28 F√©vrier 2025)", fontsize=8)
    st.pyplot(fig)        

    # Code pour afficher le meilleur mod√®le

def retained_models(x_train, df_cat):
    st.header("Mod√®les retenus")
    st.write("Dans cette section, nous pr√©sentons les mod√®les retenus pour le projet MLOps.")

